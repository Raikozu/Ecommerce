{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/seller.service\";\nclass AuthGuard {\n  constructor(sellerService) {\n    this.sellerService = sellerService;\n  }\n  canActivate(route, state) {\n    // La tua logica di autenticazione e controllo dei permessi\n    return this.sellerService.isSellerLoggedIn; // Ritorna true se l'utente ha l'autenticazione o i permessi appropriati\n  }\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.SellerService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthGuard };","map":{"version":3,"names":["AuthGuard","constructor","sellerService","canActivate","route","state","isSellerLoggedIn","i0","ɵɵinject","i1","SellerService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\franc\\Documents\\Job\\Progetti\\ecommerce\\frontend\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot, UrlTree } from '@angular/router';\nimport { SellerService } from './services/seller.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private sellerService:SellerService) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot, \n    state: RouterStateSnapshot):Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree{\n    // La tua logica di autenticazione e controllo dei permessi\n    return this.sellerService.isSellerLoggedIn; // Ritorna true se l'utente ha l'autenticazione o i permessi appropriati\n  }\n}"],"mappings":";;AAKA,MAGaA,SAAS;EACpBC,YAAoBC,aAA2B;IAA3B,KAAAA,aAAa,GAAbA,aAAa;EAAiB;EAElDC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B;IACA,OAAO,IAAI,CAACH,aAAa,CAACI,gBAAgB,CAAC,CAAC;EAC9C;;;AARWN,SAAS,C;mBAATA,SAAS,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA;AAAA;AAATV,SAAS,C;SAATA,SAAS;EAAAW,OAAA,EAATX,SAAS,CAAAY,IAAA;EAAAC,UAAA,EAFR;AAAM;SAEPb,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}