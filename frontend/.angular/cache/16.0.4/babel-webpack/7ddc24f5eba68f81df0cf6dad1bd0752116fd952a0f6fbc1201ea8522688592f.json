{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { API } from './constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  makeRequest(type, url, body, params) {\n    let baseUrl = API.baseUrl;\n    url = baseUrl + url;\n    let options = {};\n    if (params) {\n      let httpParams = new HttpParams();\n      Object.keys(params).forEach(key => {\n        httpParams = httpParams.append(key, params[key]);\n      });\n      options = {\n        params: httpParams\n      };\n    }\n    if (body) {\n      options = {\n        ...options,\n        body\n      };\n      if (type.toLowerCase() == \"put\") {\n        return this.http.put(url, body, options);\n      } else if (type.toLowerCase() == \"post\") {\n        return this.http.post(url, body, options);\n      }\n    }\n    if (type.toLowerCase() == \"delete\") {\n      return this.http.delete(url, options);\n    }\n    return this.http.get(url, options);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});\nexport { ApiService };","map":{"version":3,"names":["HttpParams","API","ApiService","constructor","http","makeRequest","type","url","body","params","baseUrl","options","httpParams","Object","keys","forEach","key","append","toLowerCase","put","post","delete","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\franc\\Documents\\Job\\Progetti\\ecommerce\\frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { API } from './constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http:HttpClient) { }\n\n  makeRequest(type:string,url:string, body?:any,params?:any): Observable<any>{\n    let baseUrl=API.baseUrl\n    url=baseUrl+url\n\n    let options={}\n\n    if(params){\n\n      let httpParams= new HttpParams()\n      Object.keys(params).forEach((key)=>{\n        httpParams=httpParams.append(key,params[key])\n      })\n      options={params:httpParams}\n    }\n    if(body){\n      options={...options, body}\n      \n      if(type.toLowerCase()==\"put\"){\n        return this.http.put(url,body, options);\n      }\n      else if(type.toLowerCase()==\"post\"){\n        return this.http.post(url,body,options);\n      }\n    }\n    if(type.toLowerCase()==\"delete\"){\n      return this.http.delete(url, options);\n    }\n    return this.http.get(url,options);\n  }\n}\n"],"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAG7D,SAASC,GAAG,QAAQ,aAAa;;;AAEjC,MAGaC,UAAU;EAErBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,WAAWA,CAACC,IAAW,EAACC,GAAU,EAAEC,IAAS,EAACC,MAAW;IACvD,IAAIC,OAAO,GAACT,GAAG,CAACS,OAAO;IACvBH,GAAG,GAACG,OAAO,GAACH,GAAG;IAEf,IAAII,OAAO,GAAC,EAAE;IAEd,IAAGF,MAAM,EAAC;MAER,IAAIG,UAAU,GAAE,IAAIZ,UAAU,EAAE;MAChCa,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACM,OAAO,CAAEC,GAAG,IAAG;QACjCJ,UAAU,GAACA,UAAU,CAACK,MAAM,CAACD,GAAG,EAACP,MAAM,CAACO,GAAG,CAAC,CAAC;MAC/C,CAAC,CAAC;MACFL,OAAO,GAAC;QAACF,MAAM,EAACG;MAAU,CAAC;;IAE7B,IAAGJ,IAAI,EAAC;MACNG,OAAO,GAAC;QAAC,GAAGA,OAAO;QAAEH;MAAI,CAAC;MAE1B,IAAGF,IAAI,CAACY,WAAW,EAAE,IAAE,KAAK,EAAC;QAC3B,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAACZ,GAAG,EAACC,IAAI,EAAEG,OAAO,CAAC;OACxC,MACI,IAAGL,IAAI,CAACY,WAAW,EAAE,IAAE,MAAM,EAAC;QACjC,OAAO,IAAI,CAACd,IAAI,CAACgB,IAAI,CAACb,GAAG,EAACC,IAAI,EAACG,OAAO,CAAC;;;IAG3C,IAAGL,IAAI,CAACY,WAAW,EAAE,IAAE,QAAQ,EAAC;MAC9B,OAAO,IAAI,CAACd,IAAI,CAACiB,MAAM,CAACd,GAAG,EAAEI,OAAO,CAAC;;IAEvC,OAAO,IAAI,CAACP,IAAI,CAACkB,GAAG,CAACf,GAAG,EAACI,OAAO,CAAC;EACnC;;AAhCWT,UAAU,C;mBAAVA,UAAU,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAVxB,UAAU,C;SAAVA,UAAU;EAAAyB,OAAA,EAAVzB,UAAU,CAAA0B,IAAA;EAAAC,UAAA,EAFT;AAAM;SAEP3B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}